// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TBtest.Models;

namespace TBtest.Migrations
{
    [DbContext(typeof(TbContext))]
    partial class TbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TBtest.Models.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassName");

                    b.HasKey("ClassId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("TBtest.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Facebook");

                    b.Property<string>("Linkedin");

                    b.Property<int>("PhoneNum");

                    b.Property<string>("PublicMail");

                    b.Property<string>("Skype");

                    b.Property<string>("Telegram");

                    b.Property<string>("Twitter");

                    b.Property<string>("Viber");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("TBtest.Models.InProject", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("UserId");

                    b.HasKey("id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("inProjects");
                });

            modelBuilder.Entity("TBtest.Models.LikedPrj", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("UserId");

                    b.HasKey("id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("LikedPrjs");
                });

            modelBuilder.Entity("TBtest.Models.PrjClass", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClPeopleNeeded");

                    b.Property<int?>("ClassId");

                    b.Property<int?>("ProjectId");

                    b.HasKey("id");

                    b.HasIndex("ClassId");

                    b.HasIndex("ProjectId");

                    b.ToTable("prjClasses");
                });

            modelBuilder.Entity("TBtest.Models.PrjSkill", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("SkillId");

                    b.HasKey("id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SkillId");

                    b.ToTable("prjSkills");
                });

            modelBuilder.Entity("TBtest.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("PrjCreatedDate");

                    b.Property<string>("PrjDesc");

                    b.Property<string>("PrjImg");

                    b.Property<int>("PrjLikeCounter");

                    b.Property<string>("PrjName");

                    b.Property<int?>("UserId");

                    b.HasKey("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TBtest.Models.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<int>("ReqPrjId");

                    b.Property<int>("ReqStatus");

                    b.HasKey("RequestId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("TBtest.Models.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SkillName");

                    b.HasKey("SkillId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("TBtest.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bio");

                    b.Property<int>("ContactId");

                    b.Property<string>("Email");

                    b.Property<string>("LastName");

                    b.Property<string>("Login");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<int>("PictureParh");

                    b.Property<DateTime>("Registrated");

                    b.Property<int>("Request");

                    b.Property<int?>("RequestId");

                    b.HasKey("UserId");

                    b.HasIndex("ContactId");

                    b.HasIndex("RequestId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TBtest.Models.UserClass", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClassId");

                    b.Property<int?>("UserId");

                    b.HasKey("id");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("userClasses");
                });

            modelBuilder.Entity("TBtest.Models.UserSkill", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("SkillId");

                    b.Property<int?>("UserId");

                    b.HasKey("id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("userSkills");
                });

            modelBuilder.Entity("TBtest.Models.InProject", b =>
                {
                    b.HasOne("TBtest.Models.Project", "Project")
                        .WithMany("InProjects")
                        .HasForeignKey("ProjectId");

                    b.HasOne("TBtest.Models.User", "User")
                        .WithMany("InProjects")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TBtest.Models.LikedPrj", b =>
                {
                    b.HasOne("TBtest.Models.Project", "Project")
                        .WithMany("LikedPrjs")
                        .HasForeignKey("ProjectId");

                    b.HasOne("TBtest.Models.User", "User")
                        .WithMany("LikedPrjs")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TBtest.Models.PrjClass", b =>
                {
                    b.HasOne("TBtest.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("TBtest.Models.Project", "Project")
                        .WithMany("PrjClasses")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("TBtest.Models.PrjSkill", b =>
                {
                    b.HasOne("TBtest.Models.Project", "Project")
                        .WithMany("PrjSkills")
                        .HasForeignKey("ProjectId");

                    b.HasOne("TBtest.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId");
                });

            modelBuilder.Entity("TBtest.Models.Project", b =>
                {
                    b.HasOne("TBtest.Models.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TBtest.Models.User", b =>
                {
                    b.HasOne("TBtest.Models.Contact")
                        .WithMany("Users")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TBtest.Models.Request")
                        .WithMany("Users")
                        .HasForeignKey("RequestId");
                });

            modelBuilder.Entity("TBtest.Models.UserClass", b =>
                {
                    b.HasOne("TBtest.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("TBtest.Models.User", "User")
                        .WithMany("UserClasses")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TBtest.Models.UserSkill", b =>
                {
                    b.HasOne("TBtest.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId");

                    b.HasOne("TBtest.Models.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
